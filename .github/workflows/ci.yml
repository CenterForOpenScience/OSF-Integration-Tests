name: osf-selenium-tests CI

on:
  pull_request:
  push:
    branches:
      - develop
      - master
      - 'release/*'
      - 'hotfix/*'
      - 'feature/*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DRIVER: "Remote"
  DOMAIN: test

jobs:

  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      matrix:
        python-version: [3.6]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # - name: Cache pip
      #   uses: actions/cache@v2
      #   with:
      #     # This path is specific to Ubuntu
      #     path: ~/.cache/pip
      #     # Look to see if there is a cache hit for the corresponding requirements file
      #     key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-moo
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      #       ${{ runner.os }}-
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        id: pip-cache-step
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: install dependencies
        # if: steps.pip-cache-step.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements
          invoke requirements
      # - name: install dependencies incorrectly
      #   run: |
      #     python -m compileall /usr/local/lib/python3.6
      #     mkdir ~/python3.6-cache
      #     cp -Rf -p /usr/local/lib/python3.6/* ~/python3.6-cache/

  lint:
    name: Lint selenium code
    needs: build
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.6]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # - name: Cache pip
      #   uses: actions/cache@v2
      #   with:
      #     # This path is specific to Ubuntu
      #     path: ~/.cache/pip
      #     # Look to see if there is a cache hit for the corresponding requirements file
      #     key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-moo
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      #       ${{ runner.os }}-
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: pip cache
        id: pip-cache-step
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: install dependencies
        # if: steps.pip-cache-step.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements
          invoke requirements
      # - name: install dependencies incorrectly
      #   run: |
      #     cp -Rr -p ~/python3.6-cache/* /usr/local/lib/python3.6/
      - name: Flake away
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  smoke_test:
    name: Prod smoke tests (${{ matrix.browser }})
    if: ${{ github.ref == 'master' }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1  # run in series
      matrix:
        browser: [chrome, firefox, edge]
    steps:
      # - id: cache-python-deps
      #   uses: actions/cache@v2
      #   with:
      #     key: cached_py_deps_{{ matrix.python-version }}
      #     path: /usr/local/lib/python{{ matrix.python-version }}
      #     restore-keys: cached_py_deps_
      - uses: actions/checkout@v2
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Cache pip
        id: pip-cache-step
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-moo
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install dependencies
        # if: steps.pip-cache-step.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements
          invoke requirements
      - name: run smoke tests
        env:
          DOMAIN: prod
          PREFERRED_NODE: ra4bf
          TEST_BUILD: ${{ matrix.browser }}
        run: |
          invoke test_travis_on_prod

  staging_test:
    name: Staging tests (${{ matrix.browser }}) part ${{ matrix.partition }}
    if: ${{ github.ref != 'master' }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1  # run in series
      matrix:
        browser: [chrome, firefox, edge]
        partition: [one, two]
    steps:
      # - id: cache-python-deps
      #   uses: actions/cache@v2
      #   with:
      #     key: cached_py_deps_{{ matrix.python-version }}
      #     path: /usr/local/lib/python{{ matrix.python-version }}
      #     restore-keys: cached_py_deps_
      - uses: actions/checkout@v2
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      - name: Cache pip
        id: pip-cache-step
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-moo
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install dependencies
        # if: steps.pip-cache-step.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements
          invoke requirements
      - name: run staging tests
        env:
          TEST_BUILD: ${{ matrix.browser }}
          NEW_USER_EMAIL: ${{ secrets.NEW_USER_EMAIL }}
          BSTACK_USER: ${{ secrets.BROWSERSTACK_USERNAME }}
          BSTACK_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          CHROME_USER: ${{ secrets.CHROME_USER }}
          CHROME_USER_TOKEN: ${{ secrets.CHROME_USER_TOKEN }}
          EDGE_USER: ${{ secrets.EDGE_USER }}
          EDGE_USER_TOKEN: ${{ secrets.EDGE_USER_TOKEN }}
          FIREFOX_USER: ${{ secrets.FIREFOX_USER }}
          FIREFOX_USER_TOKEN: ${{ secrets.FIREFOX_USER_TOKEN }}
          USER_ONE: ${{ secrets.USER_ONE }}
          USER_ONE_PASSWORD: ${{ secrets.USER_ONE_PASSWORD }}
          USER_TWO: ${{ secrets.USER_TWO }}
          USER_TWO_PASSWORD: ${{ secrets.USER_TWO_PASSWORD }}
        run: |
          invoke test_travis_part_${{ matrix.partition }}
